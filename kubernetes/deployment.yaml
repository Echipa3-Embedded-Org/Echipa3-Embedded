apiVersion: v1
kind: Namespace
metadata:
  name: ss
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodered-deployment
  namespace: ss
spec:
  selector:
    matchLabels:
      app: nodered
  replicas: 1
  template:
    metadata:
      labels:
        app: nodered
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: nodered-init-copy-flows
        image: 2001slavic/ss-nodered:latest
        command: ["/bin/sh", "-c", "cp /default-flows/flows.json /data/flows.json"]
        volumeMounts:
        - name: nodered-data
          mountPath: /data
      containers:
      - name: nodered
        image: 2001slavic/ss-nodered:latest
        imagePullPolicy: Always
        ports:
        - name: nodered-port
          containerPort: 1880
        volumeMounts:
        - name: nodered-data
          mountPath: /data
        - name: nodered-images
          mountPath: /data/images
          readOnly: false
        - name: nodered-certs
          mountPath: /certs
          readOnly: true
      volumes:
        - name: nodered-certs
          secret:
            secretName: nodered-certs
        - name: nodered-data
          persistentVolumeClaim:
            claimName: nodered-pvc
        - name: nodered-images
          hostPath:
            path: /mnt/ss-proiect/Node-Red/images
            type: DirectoryOrCreate

      restartPolicy: Always
---
# Keep commented until nodered authentication is done
# apiVersion: v1
# kind: Service
# metadata:
#   name: ss-nodered-service
#   namespace: ss
# spec:
#   type: NodePort
#   selector:
#     app: nodered
#   ports:
#   - port: 1880
#     targetPort: nodered-port
#     nodePort: 30000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nodered-pvc
  namespace: ss
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mosquitto-config
  namespace: ss
data:
  mosquitto.conf: |
    # Don't allow unauthenticated users
    allow_anonymous false
    # Port to listen on 
    listener 8883
    # Uses the common name from the client cert as the username
    use_identity_as_username true
    # Path the the Certificate Authority Cert.
    cafile /mosquitto/certs/ca.crt
    # Path to server private key
    keyfile /mosquitto/certs/server.key
    # Path to server certificate
    certfile /mosquitto/certs/server.crt
    # Set TLS version
    tls_version tlsv1.2
    # Require that clients provide certificates
    require_certificate true
    log_type all
    log_dest file /mosquitto/log/mosquitto.log
    persistence_location /mosquitto/data/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mosquitto-deployment
  namespace: ss
spec:
  selector:
    matchLabels:
      app: mosquitto
  replicas: 1
  template:
    metadata:
      labels:
        app: mosquitto
    spec:
      securityContext:
        runAsUser: 1883
        runAsGroup: 1883
        fsGroup: 1883
        runAsNonRoot: true
      containers:
      - name: mosquitto
        image: eclipse-mosquitto:2.0.21
        imagePullPolicy: IfNotPresent
        ports:
        - name: mosquitto-port
          containerPort: 8883
        volumeMounts:
        - name: mosquitto-config
          mountPath: /mosquitto/config/mosquitto.conf
          subPath: mosquitto.conf
        - name: mosquitto-data
          mountPath: /mosquitto/data
        - name: mosquitto-certs
          mountPath: /mosquitto/certs
          readOnly: true
        - name: mosquitto-log
          mountPath: /mosquitto/log
          readOnly: false
      volumes:
      - name: mosquitto-config
        configMap:
          name: mosquitto-config
      - name: mosquitto-data
        persistentVolumeClaim:
          claimName: mosquitto-pvc
      - name: mosquitto-certs
        secret:
          secretName: mosquitto-certs
      - name: mosquitto-log
        hostPath:
          path: /mnt/ss-proiect/mosquitto/log
          type: DirectoryOrCreate

      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: ss-mosquitto-service
  namespace: ss
spec:
  type: NodePort
  selector:
    app: mosquitto
  ports:
  - port: 8883
    targetPort: mosquitto-port
    nodePort: 30001
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mosquitto-pvc
  namespace: ss
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: ss
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.27.5
        ports:
        - name: nginx-port
          containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: ss
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }

    http {
        server {
            listen 80;
            root /usr/share/nginx/html;
            
            location /ota/firmware.bin {
                add_header Content-Type application/octet-stream;
            }
            
            location /ota/version.txt {
                add_header Content-Type text/plain;
            }
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: ss
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: nginx-port
    nodePort: 30002
  type: NodePort
